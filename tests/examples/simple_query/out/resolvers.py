# generated by pasiphae, please do not change manually
from decimal import Decimal
from typing import Optional
from typing import Sequence
from uuid import UUID

from ariadne import EnumType
from ariadne import MutationType
from ariadne import ObjectType
from ariadne import QueryType
from graphql import GraphQLResolveInfo

from .types import Character
from .types import Droid
from .types import Episode
from .types import FriendsConnection
from .types import Human
from .types import LengthUnit
from .types import Review
from .types import ReviewInput
from .types import SearchResult
from .types import Starship

query = QueryType()


@query.field
def resolve_query_hero(
    _: None, info: GraphQLResolveInfo, episode: Episode = Episode.NEWHOPE
) -> Optional[Character]:
    ...


@query.field
def resolve_query_reviews(
    _: None, info: GraphQLResolveInfo, episode: Episode
) -> Sequence[Optional[Review]]:
    ...


@query.field
def resolve_query_search(
    _: None, info: GraphQLResolveInfo, text: str
) -> Sequence[Optional[SearchResult]]:
    ...


@query.field
def resolve_query_character(
    _: None, info: GraphQLResolveInfo, id: UUID
) -> Optional[Character]:
    ...


@query.field
def resolve_query_droid(_: None, info: GraphQLResolveInfo, id: UUID) -> Optional[Droid]:
    ...


@query.field
def resolve_query_human(_: None, info: GraphQLResolveInfo, id: UUID) -> Optional[Human]:
    ...


@query.field
def resolve_query_starship(
    _: None, info: GraphQLResolveInfo, id: UUID
) -> Optional[Starship]:
    ...


mutation = MutationType()


@mutation.field
def resolve_mutation_create_review(
    _: None, info: GraphQLResolveInfo, episode: Episode, review: ReviewInput
) -> Optional[Review]:
    ...


episode = EnumType("Episode", values=Episode)

length_unit = EnumType("LengthUnit", values=LengthUnit)

human = ObjectType("Human")


@human.field
def resolve_human_height(
    human_: Human, info: GraphQLResolveInfo, unit: LengthUnit = LengthUnit.METER
) -> Decimal:
    ...


@human.field
def resolve_human_friends_connection(
    human_: Human, info: GraphQLResolveInfo, first: Optional[int], after: Optional[UUID]
) -> FriendsConnection:
    ...


droid = ObjectType("Droid")


@droid.field
def resolve_droid_friends_connection(
    droid_: Droid, info: GraphQLResolveInfo, first: Optional[int], after: Optional[UUID]
) -> FriendsConnection:
    ...


friends_connection = ObjectType("FriendsConnection")

friends_edge = ObjectType("FriendsEdge")

page_info = ObjectType("PageInfo")

review = ObjectType("Review")

starship = ObjectType("Starship")


@starship.field
def resolve_starship_length(
    starship_: Starship, info: GraphQLResolveInfo, unit: LengthUnit = LengthUnit.METER
) -> Decimal:
    ...


resolvers = [
    query,
    mutation,
    episode,
    length_unit,
    human,
    droid,
    friends_connection,
    friends_edge,
    page_info,
    review,
    starship,
]
